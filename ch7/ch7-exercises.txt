== Exercise 7.1 ==
** Question **
Modify the program in Listing 7-1 (free_and_sbrk.c) to print out the
current value of the program break after each execution of malloc().
Run th eprogram specifying a small allocation block size.  This will
demonstrate that malloc() doesn't employ sbrk() to adjust the program
break on each call, but instead periodically allocates larger chunks
of memory from which it passees back small pieces to the caller.

** Answer **
The source is in free_and_sbrk_7_1.  Here's an example run:

$ ./prog_free_and_sbrk_7_1 40 25000

Initial program break:            0xee4000
Allocating 40*25000 bytes
***   0xee4000
***   0xf0b000
>>>   0xf0b000
>>>   0xf0b000
>>>   0xf0b000
>>>   0xf0b000
>>>   0xf0b000
***   0xf2f000
>>>   0xf2f000
>>>   0xf2f000
>>>   0xf2f000
>>>   0xf2f000
>>>   0xf2f000
***   0xf54000
>>>   0xf54000
>>>   0xf54000
>>>   0xf54000
>>>   0xf54000
>>>   0xf54000
***   0xf79000
>>>   0xf79000
>>>   0xf79000
>>>   0xf79000
>>>   0xf79000
>>>   0xf79000
***   0xf9d000
>>>   0xf9d000
>>>   0xf9d000
>>>   0xf9d000
>>>   0xf9d000
>>>   0xf9d000
***   0xfc2000
>>>   0xfc2000
>>>   0xfc2000
>>>   0xfc2000
>>>   0xfc2000
>>>   0xfc2000
***   0xfe6000
>>>   0xfe6000
>>>   0xfe6000
Program break is now:             0xfe6000
Freeing blocks from 1 to 40 in steps of 1
After free(), program break is:   0xf05000

== Exercise 7.2 ==
** Question **
(Advanced) Implement malloc() and free().

** Answer **
See po_malloc_free.c for a reference implementation.
