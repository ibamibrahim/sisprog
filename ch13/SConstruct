import os
import stat

def build_env(bufsize, sync=False):
    if sync:
        return Environment(CFLAGS='-g -DBUF_SIZE=%s -DSYNC' % bufsize)
    else:
        return Environment(CFLAGS='-g -DBUF_SIZE=%s' % bufsize)

def make_prog(bufsize, sync=False):
    if sync:
        variant = '%s_sync' % bufsize
    else:
        variant = '%s' % bufsize
    vardir = 'build_%s' % variant
    env = build_env(bufsize, sync)
    SConscript('SConscript', exports='env variant', variant_dir=vardir)
    return vardir

sizes = (10, 512, 512000)
vardirs = []
for size in sizes:
    vardirs.append(make_prog(size))
    vardirs.append(make_prog(size, True))

with open('./run_copy_tests.sh', 'w') as f:
    f.write("#! /bin/bash\n")
    for vardir in vardirs:
        f.write("echo '= %s ='\n" % vardir)
        f.write("./tim.py ./%s/prog_copy testfile.txt testfile2.txt\n\n" % vardir)

    num_bytes = 10000000
    sizes = [10, 512, 1024, 10000]

with open('./run_write_tests.sh', 'w') as f:
    f.write("echo '== write_bytes tests =='\n")
    for sz in sizes:
    	f.write("echo './prog_write_bytes testfile3.txt %s %s'\n" % (num_bytes, sz))
	f.write("./tim.py ./prog_write_bytes testfile3.txt %s %s\n" % (num_bytes, sz))


os.chmod('./run_copy_tests.sh', stat.S_IRUSR | stat.S_IXUSR | stat.S_IWUSR)
os.chmod('./run_write_tests.sh', stat.S_IRUSR | stat.S_IXUSR | stat.S_IWUSR)

with open('./testfile.txt', 'w') as f:
    f.write("test\n" * 1000)  # ~5K

#
# Other programs not done in a SConscript
#
env = Environment(CFLAGS='-g')
env.Program('prog_write_bytes', 'write_bytes.c')
env.Program('prog_tail', 'tail.c')
